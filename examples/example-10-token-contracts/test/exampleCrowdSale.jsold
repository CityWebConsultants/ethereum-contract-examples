
const Web3 = require('web3')
let web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"))
//@todo environment awareness
// can dyamically set truffle config to choose a block in the not too
// distant future
// and build in calls to infura that dont require fucking metamask


let ExampleCrowdSale = artifacts.require("./ExampleCrowdSale.sol")
let CWCToken = artifacts.require("./CWCToken.sol")

//console.dir(ExampleCrowdSale)

//how do we fetch module exports from config of deployment
//upgradeable

// set test cases depending on provider

contract('ExampleCrowdSale', function(accounts) {

  var ccc, cctoken

  it("Should deploy Capped Crowdsale Contract", function(done) {
    ExampleCrowdSale.deployed().then(function(instance) {
      ccc = instance
      console.log('deplyed', ccc.deployed)
      assert.isOk(ccc)
      console.log(ccc)
      console.log('Contract address', ccc.address);
      // does it deploy before it depl
      //check that value for token exists then call it done

      //just check that token instance has been created
      // ccc.token.call().then(function(address){
      //   tokenInstance = CWCToken.at(address)
      //   tokenInstance.balanceOf(web3.eth.accounts[1])
      //   .then(function(amount){
      //       console.log('amount: ' + amount);
      //   })
      // should also be checking creation of token contract
      done()
    })
  })
//return
    it("shoudl watch for events", function(done) {

      var events = ccc.allEvents('latest');


      events.watch(function(error, event) {

      if (!error) {
         console.log(event);
         done()
      } else {
        console.log(error)
      }

      })

    })

    it("Should wait for start time of contract", function(done) {
      ccc.startBlock.call().then(function(startBlock) {
        while (web3.eth.blockNumber < startBlock.toNumber()) {
          console.log('current block: ',  web3.eth.blockNumber);
          console.log('waiting for: ', startBlock.toNumber())
        } // wait for

        done()
      })
    })

    it("Should should send ether to contract", function(done) {

      ccc.sendTransaction({from: web3.eth.accounts[1], /*to:ccc.address, */value: web3.toWei(0.2, "ether")/*, gas:470000*/}, function(err, res){
        if (!err) {
          // Hmmmmm -- we get a whole object Back
          // maybe we should use send on contract
          console.log(res)
          // we should do something with the response and interrogate topics

          //watch for events and see what happens
          //watch all events
          // check tx receipt for event
          // how do we test events in this scenario
          // should do something with the transaction receipt and check event logs
          // look at the test cases in
          done()
        }
      })
    })


    // ok so we can call the function but it still isn't actually doing anything
    // really really do need to grab setup values from another place so
    // can be used consitently
    it("should have assigned tokens to sender", function(done) {
      // tokenInstance = CWCToken.at()
// weiRaised

      ccc.token().then(function(address) {
        console.log('token address: ' + address)
        tokenInstance = CWCToken.at(address)
        console.log(tokenInstance)
        tokenInstance.balanceOf(web3.eth.accounts[1])
        .then(function(amount) {
            console.log(amount)
            done()
        })
        // tokenInstance.symbol.call().then(function(foo){
        //   console.log(foo)
        // })
        // tokenInstance.balances.call().then(function(bal){
        //   console.log(bal)
        // })
      })
    })

    it("Should show amount of weiRaised", function() {

    })
})



    // then we should check the contract to make sure we have tokens


  // it("Should estimate gas", function(done) {
  //   let foo = web3.eth.estimateGas(ccc.abi, ccc.address, {from: web3.eth.accounts[1], to: ccc.address, value: web3.toWei(0.001, "ether"), gas: web3.toWei(50, "gwei")})
  //   console.log(foo)
  //   console.log('aaaarrrghhh');
  //   //assert(true)
  //   done()
  // })




  //return
/*
  it("Should have settings for start block", function(done) {
    ccc.startBlock.call().then(function(start){
      assert.equal(start.toNumber(), 100)
      // can we get the blockheight from the provider
      console.log('Current block height', web3.eth.blockNumber)
      done()
    })
  })

  it ("Should fail to send contribution", function(done) {
    console.log('base', web3.eth.coinbase)
    console.log('ccc', ccc.address)

    //@todo derive legal block height from parameters

    let legalBlockHeight = 100
    let blockHeightDifference = (legalBlockHeight - web3.eth.blockNumber) //- 1
    for(i=0;i<blockHeightDifference;i++) {


      // need to treat this separatel

    try {
        web3.eth.sendTransaction({from: web3.eth.coinbase, to: ccc.address, value: web3.toWei(1, "ether"), gasLimit: 90000})
        .then(function(result){
          console.log(result)
        })
      })
      //ccc.buyTokens(web3.eth.accounts[2], {value: 10}).then(function(result){
        console.log(result)
//      })
// so... this is probably failing for other reasons.....





      ///  ccc.buyTokens(web3.eth.accounts[2],{from: web3.eth.accounts[1], value: 10, gasLimit: 100000})
//         .then(function(result) {
//           // if (web3.eth.blockNumber >= legalBlockHeight) {
//
//             console.log('correct result', result)
// //          }
//         })
    }
    catch(err) {
      console.log(err);
      // we expect an evm exception
      //  check the value and make sure this failed properly!!!!
      // what is the problem with testing
      assert(true)
      console.log('keep calm and carry on ' + web3.eth.blockNumber)
    }
  }
  done()
  })


  // if(error.toString().indexOf("invalid JUMP") != -1) {
  //    console.log("We were expecting a Solidity throw (aka an invalid JUMP), we got one. Test succeeded.");
  //  } else {

// grrrrrr, so what is the actual problem here

//web3.eth.sendTransaction({from: web3.eth.accounts[1], to: '0x8e3c2506853b0debdea551bae69b77581965ebb5', value: web3.toWei(1, "ether"), gasLimit: 21000})
//web3.eth.getBalance('0x8e3c2506853b0debdea551bae69b77581965ebb5')

//arrrrgghhhhhhhhhhhhhhhhhhhhhhhhhhhhhh


// is there another way to send eth or explicitly call a fallback function -- is this really a gas issue
// how the fuck are we supposed to send
//aaaaarrhhhjjjj



  it("Should send payment to contract via function call.", function(done){
    ccc.buyTokens(web3.eth.accounts[2],{from: web3.eth.accounts[1], value: 10, gasLimit: 100000})
    .then(function(result) {
        console.log(result)
        done()
    })
  })

  // it("should do something else", function(done) {
  //   ccc.startBlock.call().then(function(start){
  //     assert.equal(start.toNumber(), 100)
  //     // can we get the blockheight from the provider
  //     console.log('Current block height', web3.eth.blockNumber)
  //     done()
  //   })
  // })

  // it("Should cycle through a number of blocks", function() {
  //   while(web3.eth.blockNumber < 100 - 1 ) {
  //     ccc.startBlock()
  //     console.log(web3.eth.blockNumber)
  //   }
  // })
//     //try to send and pass
//     // if (web3.eth.blockNumber < 100) {
//     //   let difference = 100 - web3.eth.blockNumber
//     //   for (let i=0;i<difference;i++) {
//     //
//     //   }
// //    }
//
//     // should try and make a purchase and
//
//     //get block height
//     //make number of async requests to get to the block we ned
//   })

  // if (web3.eth.blockNumber < 7) {
  //   console.log('hello world')
  // }

  // function isException(error) {
  //     let strError = error.toString();
  //     return strError.includes('invalid opcode') || strError.includes('invalid JUMP');
  // }
  //
  // function ensureException(error) {
  //     assert(isException(error), error.toString());
  // }
  //
  // module.exports = {
  //     zeroAddress: '0x0000000000000000000000000000000000000000',
  //     isException: isException,
  //     ensureException: ensureException
  // };
*/
